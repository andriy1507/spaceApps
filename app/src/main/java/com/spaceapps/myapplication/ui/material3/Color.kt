package com.spaceapps.myapplication.ui.material3

import androidx.compose.material3.darkColorScheme
import androidx.compose.material3.lightColorScheme
import androidx.compose.ui.graphics.Color

val LightPrimary = Color(0xFFbc0049)
val LightOnPrimary = Color(0xFFffffff)
val LightPrimaryContainer = Color(0xFFffd9df)
val LightOnPrimaryContainer = Color(0xFF400013)
val LightSecondary = Color(0xFF8c5000)
val LightOnSecondary = Color(0xFFffffff)
val LightSecondaryContainer = Color(0xFFffdcbb)
val LightOnSecondaryContainer = Color(0xFF2d1600)
val Light_tertiary = Color(0xFF795831)
val LightOnTertiary = Color(0xFFffffff)
val Light_tertiaryContainer = Color(0xFFffddb8)
val LightOnTertiaryContainer = Color(0xFF2c1700)
val LightError = Color(0xFFba1b1b)
val LightErrorContainer = Color(0xFFffdad4)
val LightOnError = Color(0xFFffffff)
val LightOnErrorContainer = Color(0xFF410001)
val Light_background = Color(0xFFfcfcfc)
val LightOnBackground = Color(0xFF201a1b)
val LightSurface = Color(0xFFfcfcfc)
val LightOnSurface = Color(0xFF201a1b)
val LightSurfaceVariant = Color(0xFFf4dddf)
val LightOnSurfaceVariant = Color(0xFF524345)
val LightOutline = Color(0xFF847375)
val LightInverseOnSurface = Color(0xFFfaeeee)
val LightInverseSurface = Color(0xFF362f30)

val DarkPrimary = Color(0xFFffb2c0)
val DarkOnPrimary = Color(0xFF670024)
val DarkPrimaryContainer = Color(0xFF900036)
val DarkOnPrimaryContainer = Color(0xFFffd9df)
val DarkSecondary = Color(0xFFffb86d)
val DarkOnSecondary = Color(0xFF4b2800)
val DarkSecondaryContainer = Color(0xFF6a3b00)
val DarkOnSecondaryContainer = Color(0xFFffdcbb)
val DarkTertiary = Color(0xFFebbf90)
val DarkOnTertiary = Color(0xFF452b08)
val DarkTertiaryContainer = Color(0xFF5f411c)
val DarkOnTertiaryContainer = Color(0xFFffddb8)
val DarkError = Color(0xFFffb4a9)
val DarkErrorContainer = Color(0xFF930006)
val DarkOnError = Color(0xFF680003)
val DarkOnErrorContainer = Color(0xFFffdad4)
val DarkBackground = Color(0xFF201a1b)
val DarkOnBackground = Color(0xFFece0e0)
val DarkSurface = Color(0xFF201a1b)
val DarkOnSurface = Color(0xFFece0e0)
val DarkSurfaceVariant = Color(0xFF524345)
val DarkOnSurfaceVariant = Color(0xFFd6c1c3)
val DarkOutline = Color(0xFF9f8c8e)
val DarkInverseOnSurface = Color(0xFF201a1b)
val DarkInverseSurface = Color(0xFFece0e0)

val LightColorScheme = lightColorScheme(
    primary = LightPrimary,
    onPrimary = LightOnPrimary,
    primaryContainer = LightPrimaryContainer,
    onPrimaryContainer = LightOnPrimaryContainer,
    secondary = LightSecondary,
    onSecondary = LightOnSecondary,
    secondaryContainer = LightSecondaryContainer,
    onSecondaryContainer = LightOnSecondaryContainer,
    tertiary = Light_tertiary,
    onTertiary = LightOnTertiary,
    tertiaryContainer = Light_tertiaryContainer,
    onTertiaryContainer = LightOnTertiaryContainer,
    background = Light_background,
    onBackground = LightOnBackground,
    surface = LightSurface,
    onSurface = LightOnSurface,
    surfaceVariant = LightSurfaceVariant,
    onSurfaceVariant = LightOnSurfaceVariant,
    inverseSurface = LightInverseSurface,
    inverseOnSurface = LightInverseOnSurface,
    error = LightError,
    onError = LightOnError,
    errorContainer = LightErrorContainer,
    onErrorContainer = LightOnErrorContainer,
    outline = LightOutline
)
val DarkColorScheme = darkColorScheme(
    primary = DarkPrimary,
    onPrimary = DarkOnPrimary,
    primaryContainer = DarkPrimaryContainer,
    onPrimaryContainer = DarkOnPrimaryContainer,
    secondary = DarkSecondary,
    onSecondary = DarkOnSecondary,
    secondaryContainer = DarkSecondaryContainer,
    onSecondaryContainer = DarkOnSecondaryContainer,
    tertiary = DarkTertiary,
    onTertiary = DarkOnTertiary,
    tertiaryContainer = DarkTertiaryContainer,
    onTertiaryContainer = DarkOnTertiaryContainer,
    background = DarkBackground,
    onBackground = DarkOnBackground,
    surface = DarkSurface,
    onSurface = DarkOnSurface,
    surfaceVariant = DarkSurfaceVariant,
    onSurfaceVariant = DarkOnSurfaceVariant,
    inverseSurface = DarkInverseSurface,
    inverseOnSurface = DarkInverseOnSurface,
    error = DarkError,
    onError = DarkOnError,
    errorContainer = DarkErrorContainer,
    onErrorContainer = DarkOnErrorContainer,
    outline = DarkOutline
)
